State 7 conflicts: 2 shift/reduce
State 11 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: class_def

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}'

    3 optional_field_decl_list: field_decl_list
    4                         | /* empty */

    5 optional_method_decl_list: method_decl_list
    6                          | /* empty */

    7 field_decl_list: field_decl_list field_decl
    8                | field_decl

    9 method_decl_list: method_decl_list method_decl
   10                 | method_decl

   11 class_name: "'identificador'"

   12 field_decl: type var_list ';'

   13 var_list: var_list ',' var
   14         | var

   15 var: "'identificador'" optional_initialization
   16    | "'identificador'" '[' "constante entera" ']'

   17 optional_initialization: '=' constant
   18                        | /* empty */

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' block

   20 return_type: type
   21            | "'void'"

   22 opt_parameter_decl_list: parameter_decl_list
   23                        | /* empty */

   24 parameter_decl_list: parameter_decl_list ',' parameter_decl
   25                    | parameter_decl

   26 parameter_decl: type "'identificador'"

   27 block: '{' opt_var_decl_list opt_statement_list '}'

   28 opt_var_decl_list: var_decl_list
   29                  | /* empty */

   30 opt_statement_list: statement_list
   31                   | /* empty */

   32 var_decl_list: var_decl_list var_decl
   33              | var_decl

   34 var_decl: type var_list ';'

   35 type: "'int'"
   36     | "'boolean'"

   37 statement_list: statement_list statement
   38               | statement

   39 statement: assign ';'
   40          | method_call ';'
   41          | if_statement
   42          | while_statement
   43          | for_statement
   44          | return_statement ';'
   45          | break_statement ';'
   46          | continue_statement ';'
   47          | block

   48 assign: lvalue '=' expr

   49 method_call: method_name '(' opt_method_call_argument_list ')'
   50            | "'print'" print_argument_list
   51            | "'read'" read_argument_list

   52 method_name: "'identificador'"

   53 opt_method_call_argument_list: method_call_argument_list
   54                              | /* empty */

   55 method_call_argument_list: method_call_argument_list ',' expr
   56                          | expr

   57 print_argument_list: print_argument_list ',' print_argument
   58                    | print_argument

   59 print_argument: "constante de cadena"
   60               | expr

   61 read_argument_list: read_argument_list ',' lvalue
   62                   | lvalue

   63 lvalue: "'identificador'" opt_array_dimension

   64 opt_array_dimension: '[' expr ']'
   65                    | /* empty */

   66 if_statement: "'if'" '(' expr ')' block opt_else

   67 opt_else: "'else'" block
   68         | /* empty */

   69 while_statement: "'while'" '(' expr ')' block

   70 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block

   71 for_assignment_list: for_assignment_list ',' assign
   72                    | assign

   73 return_statement: "'return'" opt_expr

   74 break_statement: "'break'"

   75 continue_statement: "'continue'"

   76 opt_expr: expr
   77         | /* empty */

   78 expr: expr "operador booleano 'or'" bool_term
   79     | bool_term

   80 bool_term: bool_term "operador booleano 'and'" relational_expr
   81          | relational_expr

   82 relational_expr: relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | bit_shift_expr

   84 bit_shift_expr: bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | arith_expr

   86 arith_expr: arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | arith_term

   88 arith_term: arith_term "operador aritmetico '*', '/', '%' " factor
   89           | factor

   90 factor: '!' factor
   91       | "operador aritmetico '+' o '-'" factor
   92       | lvalue
   93       | method_name '(' opt_method_call_argument_list ')'
   94       | constant
   95       | '(' expr ')'

   96 constant: "constante entera"
   97         | "constante caracter"
   98         | "constante real"
   99         | bool_constant

  100 bool_constant: "'true'"
  101              | "'false'"


Terminals, with rules where they appear

$end (0) 0
'!' (33) 90
'(' (40) 19 49 66 69 70 93 95
')' (41) 19 49 66 69 70 93 95
',' (44) 13 24 55 57 61 71
';' (59) 12 34 39 40 44 45 46 70
'=' (61) 17 48
'[' (91) 16 64
']' (93) 16 64
'{' (123) 2 27
'}' (125) 2 27
error (256)
"'identificador'" (258) 11 15 16 19 26 52 63
"'class'" (259) 2
"'break'" (260) 74
"'continue'" (261) 75
"'while'" (262) 69
"'for'" (263) 70
"'if'" (264) 66
"'else'" (265) 67
"'return'" (266) 73
"'read'" (267) 51
"'print'" (268) 50
"'true'" (269) 100
"'false'" (270) 101
"'int'" (271) 35
"'void'" (272) 21
"'boolean'" (273) 36
"operador booleano 'or'" (274) 78
"operador booleano 'and'" (275) 80
"operador de corrimiento de bits" (276) 84
"operador relacional '>', '<', '>=', '<=', '==' o '!='" (277) 82
"operador aritmetico '+' o '-'" (278) 86 91
"operador aritmetico '*', '/', '%' " (279) 88
"constante caracter" (280) 97
"constante entera" (281) 16 96
"constante real" (282) 98
"constante de cadena" (283) 59


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
class_def (41)
    on left: 2, on right: 1
optional_field_decl_list (42)
    on left: 3 4, on right: 2
optional_method_decl_list (43)
    on left: 5 6, on right: 2
field_decl_list (44)
    on left: 7 8, on right: 3 7
method_decl_list (45)
    on left: 9 10, on right: 5 9
class_name (46)
    on left: 11, on right: 2
field_decl (47)
    on left: 12, on right: 7 8
var_list (48)
    on left: 13 14, on right: 12 13 34
var (49)
    on left: 15 16, on right: 13 14
optional_initialization (50)
    on left: 17 18, on right: 15
method_decl (51)
    on left: 19, on right: 9 10
return_type (52)
    on left: 20 21, on right: 19
opt_parameter_decl_list (53)
    on left: 22 23, on right: 19
parameter_decl_list (54)
    on left: 24 25, on right: 22 24
parameter_decl (55)
    on left: 26, on right: 24 25
block (56)
    on left: 27, on right: 19 47 66 67 69 70
opt_var_decl_list (57)
    on left: 28 29, on right: 27
opt_statement_list (58)
    on left: 30 31, on right: 27
var_decl_list (59)
    on left: 32 33, on right: 28 32
var_decl (60)
    on left: 34, on right: 32 33
type (61)
    on left: 35 36, on right: 12 20 26 34
statement_list (62)
    on left: 37 38, on right: 30 37
statement (63)
    on left: 39 40 41 42 43 44 45 46 47, on right: 37 38
assign (64)
    on left: 48, on right: 39 71 72
method_call (65)
    on left: 49 50 51, on right: 40
method_name (66)
    on left: 52, on right: 49 93
opt_method_call_argument_list (67)
    on left: 53 54, on right: 49 93
method_call_argument_list (68)
    on left: 55 56, on right: 53 55
print_argument_list (69)
    on left: 57 58, on right: 50 57
print_argument (70)
    on left: 59 60, on right: 57 58
read_argument_list (71)
    on left: 61 62, on right: 51 61
lvalue (72)
    on left: 63, on right: 48 61 62 92
opt_array_dimension (73)
    on left: 64 65, on right: 63
if_statement (74)
    on left: 66, on right: 41
opt_else (75)
    on left: 67 68, on right: 66
while_statement (76)
    on left: 69, on right: 42
for_statement (77)
    on left: 70, on right: 43
for_assignment_list (78)
    on left: 71 72, on right: 70 71
return_statement (79)
    on left: 73, on right: 44
break_statement (80)
    on left: 74, on right: 45
continue_statement (81)
    on left: 75, on right: 46
opt_expr (82)
    on left: 76 77, on right: 73
expr (83)
    on left: 78 79, on right: 48 55 56 60 64 66 69 70 76 78 95
bool_term (84)
    on left: 80 81, on right: 78 79 80
relational_expr (85)
    on left: 82 83, on right: 80 81 82
bit_shift_expr (86)
    on left: 84 85, on right: 82 83 84
arith_expr (87)
    on left: 86 87, on right: 84 85 86
arith_term (88)
    on left: 88 89, on right: 86 87 88
factor (89)
    on left: 90 91 92 93 94 95, on right: 88 89 90 91
constant (90)
    on left: 96 97 98 99, on right: 17 94
bool_constant (91)
    on left: 100 101, on right: 99


state 0

    0 $accept: . program $end
    1 program: . class_def
    2 class_def: . "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}'

    "'class'"  shift, and go to state 1

    program    go to state 2
    class_def  go to state 3


state 1

    2 class_def: "'class'" . class_name '{' optional_field_decl_list optional_method_decl_list '}'
   11 class_name: . "'identificador'"

    "'identificador'"  shift, and go to state 4

    class_name  go to state 5


state 2

    0 $accept: program . $end

    $end  shift, and go to state 6


state 3

    1 program: class_def .

    $default  reduce using rule 1 (program)


state 4

   11 class_name: "'identificador'" .

    $default  reduce using rule 11 (class_name)


state 5

    2 class_def: "'class'" class_name . '{' optional_field_decl_list optional_method_decl_list '}'

    '{'  shift, and go to state 7


state 6

    0 $accept: program $end .

    $default  accept


state 7

    2 class_def: "'class'" class_name '{' . optional_field_decl_list optional_method_decl_list '}'
    3 optional_field_decl_list: . field_decl_list
    4                         | .  ["'int'", "'void'", "'boolean'", '}']
    7 field_decl_list: . field_decl_list field_decl
    8                | . field_decl
   12 field_decl: . type var_list ';'
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    "'int'"      [reduce using rule 4 (optional_field_decl_list)]
    "'boolean'"  [reduce using rule 4 (optional_field_decl_list)]
    $default     reduce using rule 4 (optional_field_decl_list)

    optional_field_decl_list  go to state 10
    field_decl_list           go to state 11
    field_decl                go to state 12
    type                      go to state 13


state 8

   35 type: "'int'" .

    $default  reduce using rule 35 (type)


state 9

   36 type: "'boolean'" .

    $default  reduce using rule 36 (type)


state 10

    2 class_def: "'class'" class_name '{' optional_field_decl_list . optional_method_decl_list '}'
    5 optional_method_decl_list: . method_decl_list
    6                          | .  ['}']
    9 method_decl_list: . method_decl_list method_decl
   10                 | . method_decl
   19 method_decl: . return_type "'identificador'" '(' opt_parameter_decl_list ')' block
   20 return_type: . type
   21            | . "'void'"
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'void'"     shift, and go to state 14
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 6 (optional_method_decl_list)

    optional_method_decl_list  go to state 15
    method_decl_list           go to state 16
    method_decl                go to state 17
    return_type                go to state 18
    type                       go to state 19


state 11

    3 optional_field_decl_list: field_decl_list .  ["'int'", "'void'", "'boolean'", '}']
    7 field_decl_list: field_decl_list . field_decl
   12 field_decl: . type var_list ';'
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    "'int'"      [reduce using rule 3 (optional_field_decl_list)]
    "'boolean'"  [reduce using rule 3 (optional_field_decl_list)]
    $default     reduce using rule 3 (optional_field_decl_list)

    field_decl  go to state 20
    type        go to state 13


state 12

    8 field_decl_list: field_decl .

    $default  reduce using rule 8 (field_decl_list)


state 13

   12 field_decl: type . var_list ';'
   13 var_list: . var_list ',' var
   14         | . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'

    "'identificador'"  shift, and go to state 21

    var_list  go to state 22
    var       go to state 23


state 14

   21 return_type: "'void'" .

    $default  reduce using rule 21 (return_type)


state 15

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list . '}'

    '}'  shift, and go to state 24


state 16

    5 optional_method_decl_list: method_decl_list .  ['}']
    9 method_decl_list: method_decl_list . method_decl
   19 method_decl: . return_type "'identificador'" '(' opt_parameter_decl_list ')' block
   20 return_type: . type
   21            | . "'void'"
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'void'"     shift, and go to state 14
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 5 (optional_method_decl_list)

    method_decl  go to state 25
    return_type  go to state 18
    type         go to state 19


state 17

   10 method_decl_list: method_decl .

    $default  reduce using rule 10 (method_decl_list)


state 18

   19 method_decl: return_type . "'identificador'" '(' opt_parameter_decl_list ')' block

    "'identificador'"  shift, and go to state 26


state 19

   20 return_type: type .

    $default  reduce using rule 20 (return_type)


state 20

    7 field_decl_list: field_decl_list field_decl .

    $default  reduce using rule 7 (field_decl_list)


state 21

   15 var: "'identificador'" . optional_initialization
   16    | "'identificador'" . '[' "constante entera" ']'
   17 optional_initialization: . '=' constant
   18                        | .  [';', ',']

    '['  shift, and go to state 27
    '='  shift, and go to state 28

    $default  reduce using rule 18 (optional_initialization)

    optional_initialization  go to state 29


state 22

   12 field_decl: type var_list . ';'
   13 var_list: var_list . ',' var

    ';'  shift, and go to state 30
    ','  shift, and go to state 31


state 23

   14 var_list: var .

    $default  reduce using rule 14 (var_list)


state 24

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}' .

    $default  reduce using rule 2 (class_def)


state 25

    9 method_decl_list: method_decl_list method_decl .

    $default  reduce using rule 9 (method_decl_list)


state 26

   19 method_decl: return_type "'identificador'" . '(' opt_parameter_decl_list ')' block

    '('  shift, and go to state 32


state 27

   16 var: "'identificador'" '[' . "constante entera" ']'

    "constante entera"  shift, and go to state 33


state 28

   17 optional_initialization: '=' . constant
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    "constante real"      shift, and go to state 38

    constant       go to state 39
    bool_constant  go to state 40


state 29

   15 var: "'identificador'" optional_initialization .

    $default  reduce using rule 15 (var)


state 30

   12 field_decl: type var_list ';' .

    $default  reduce using rule 12 (field_decl)


state 31

   13 var_list: var_list ',' . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'

    "'identificador'"  shift, and go to state 21

    var  go to state 41


state 32

   19 method_decl: return_type "'identificador'" '(' . opt_parameter_decl_list ')' block
   22 opt_parameter_decl_list: . parameter_decl_list
   23                        | .  [')']
   24 parameter_decl_list: . parameter_decl_list ',' parameter_decl
   25                    | . parameter_decl
   26 parameter_decl: . type "'identificador'"
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 23 (opt_parameter_decl_list)

    opt_parameter_decl_list  go to state 42
    parameter_decl_list      go to state 43
    parameter_decl           go to state 44
    type                     go to state 45


state 33

   16 var: "'identificador'" '[' "constante entera" . ']'

    ']'  shift, and go to state 46


state 34

  100 bool_constant: "'true'" .

    $default  reduce using rule 100 (bool_constant)


state 35

  101 bool_constant: "'false'" .

    $default  reduce using rule 101 (bool_constant)


state 36

   97 constant: "constante caracter" .

    $default  reduce using rule 97 (constant)


state 37

   96 constant: "constante entera" .

    $default  reduce using rule 96 (constant)


state 38

   98 constant: "constante real" .

    $default  reduce using rule 98 (constant)


state 39

   17 optional_initialization: '=' constant .

    $default  reduce using rule 17 (optional_initialization)


state 40

   99 constant: bool_constant .

    $default  reduce using rule 99 (constant)


state 41

   13 var_list: var_list ',' var .

    $default  reduce using rule 13 (var_list)


state 42

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list . ')' block

    ')'  shift, and go to state 47


state 43

   22 opt_parameter_decl_list: parameter_decl_list .  [')']
   24 parameter_decl_list: parameter_decl_list . ',' parameter_decl

    ','  shift, and go to state 48

    $default  reduce using rule 22 (opt_parameter_decl_list)


state 44

   25 parameter_decl_list: parameter_decl .

    $default  reduce using rule 25 (parameter_decl_list)


state 45

   26 parameter_decl: type . "'identificador'"

    "'identificador'"  shift, and go to state 49


state 46

   16 var: "'identificador'" '[' "constante entera" ']' .

    $default  reduce using rule 16 (var)


state 47

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' . block
   27 block: . '{' opt_var_decl_list opt_statement_list '}'

    '{'  shift, and go to state 50

    block  go to state 51


state 48

   24 parameter_decl_list: parameter_decl_list ',' . parameter_decl
   26 parameter_decl: . type "'identificador'"
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    parameter_decl  go to state 52
    type            go to state 45


state 49

   26 parameter_decl: type "'identificador'" .

    $default  reduce using rule 26 (parameter_decl)


state 50

   27 block: '{' . opt_var_decl_list opt_statement_list '}'
   28 opt_var_decl_list: . var_decl_list
   29                  | .  ["'identificador'", "'break'", "'continue'", "'while'", "'for'", "'if'", "'return'", "'read'", "'print'", '{', '}']
   32 var_decl_list: . var_decl_list var_decl
   33              | . var_decl
   34 var_decl: . type var_list ';'
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 29 (opt_var_decl_list)

    opt_var_decl_list  go to state 53
    var_decl_list      go to state 54
    var_decl           go to state 55
    type               go to state 56


state 51

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' block .

    $default  reduce using rule 19 (method_decl)


state 52

   24 parameter_decl_list: parameter_decl_list ',' parameter_decl .

    $default  reduce using rule 24 (parameter_decl_list)


state 53

   27 block: . '{' opt_var_decl_list opt_statement_list '}'
   27      | '{' opt_var_decl_list . opt_statement_list '}'
   30 opt_statement_list: . statement_list
   31                   | .  ['}']
   37 statement_list: . statement_list statement
   38               | . statement
   39 statement: . assign ';'
   40          | . method_call ';'
   41          | . if_statement
   42          | . while_statement
   43          | . for_statement
   44          | . return_statement ';'
   45          | . break_statement ';'
   46          | . continue_statement ';'
   47          | . block
   48 assign: . lvalue '=' expr
   49 method_call: . method_name '(' opt_method_call_argument_list ')'
   50            | . "'print'" print_argument_list
   51            | . "'read'" read_argument_list
   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   66 if_statement: . "'if'" '(' expr ')' block opt_else
   69 while_statement: . "'while'" '(' expr ')' block
   70 for_statement: . "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block
   73 return_statement: . "'return'" opt_expr
   74 break_statement: . "'break'"
   75 continue_statement: . "'continue'"

    "'identificador'"  shift, and go to state 57
    "'break'"          shift, and go to state 58
    "'continue'"       shift, and go to state 59
    "'while'"          shift, and go to state 60
    "'for'"            shift, and go to state 61
    "'if'"             shift, and go to state 62
    "'return'"         shift, and go to state 63
    "'read'"           shift, and go to state 64
    "'print'"          shift, and go to state 65
    '{'                shift, and go to state 50

    $default  reduce using rule 31 (opt_statement_list)

    block               go to state 66
    opt_statement_list  go to state 67
    statement_list      go to state 68
    statement           go to state 69
    assign              go to state 70
    method_call         go to state 71
    method_name         go to state 72
    lvalue              go to state 73
    if_statement        go to state 74
    while_statement     go to state 75
    for_statement       go to state 76
    return_statement    go to state 77
    break_statement     go to state 78
    continue_statement  go to state 79


state 54

   28 opt_var_decl_list: var_decl_list .  ["'identificador'", "'break'", "'continue'", "'while'", "'for'", "'if'", "'return'", "'read'", "'print'", '{', '}']
   32 var_decl_list: var_decl_list . var_decl
   34 var_decl: . type var_list ';'
   35 type: . "'int'"
   36     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 28 (opt_var_decl_list)

    var_decl  go to state 80
    type      go to state 56


state 55

   33 var_decl_list: var_decl .

    $default  reduce using rule 33 (var_decl_list)


state 56

   13 var_list: . var_list ',' var
   14         | . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'
   34 var_decl: type . var_list ';'

    "'identificador'"  shift, and go to state 21

    var_list  go to state 81
    var       go to state 23


state 57

   52 method_name: "'identificador'" .  ['(']
   63 lvalue: "'identificador'" . opt_array_dimension
   64 opt_array_dimension: . '[' expr ']'
   65                    | .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", "operador aritmetico '+' o '-'", "operador aritmetico '*', '/', '%' ", ';', ',', ']', '=', ')']

    '['  shift, and go to state 82

    '('       reduce using rule 52 (method_name)
    $default  reduce using rule 65 (opt_array_dimension)

    opt_array_dimension  go to state 83


state 58

   74 break_statement: "'break'" .

    $default  reduce using rule 74 (break_statement)


state 59

   75 continue_statement: "'continue'" .

    $default  reduce using rule 75 (continue_statement)


state 60

   69 while_statement: "'while'" . '(' expr ')' block

    '('  shift, and go to state 84


state 61

   70 for_statement: "'for'" . '(' for_assignment_list ';' expr ';' for_assignment_list ')' block

    '('  shift, and go to state 85


state 62

   66 if_statement: "'if'" . '(' expr ')' block opt_else

    '('  shift, and go to state 86


state 63

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   73 return_statement: "'return'" . opt_expr
   76 opt_expr: . expr
   77         | .  [';']
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    $default  reduce using rule 77 (opt_expr)

    method_name      go to state 90
    lvalue           go to state 91
    opt_expr         go to state 92
    expr             go to state 93
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 64

   51 method_call: "'read'" . read_argument_list
   61 read_argument_list: . read_argument_list ',' lvalue
   62                   | . lvalue
   63 lvalue: . "'identificador'" opt_array_dimension

    "'identificador'"  shift, and go to state 101

    read_argument_list  go to state 102
    lvalue              go to state 103


state 65

   50 method_call: "'print'" . print_argument_list
   52 method_name: . "'identificador'"
   57 print_argument_list: . print_argument_list ',' print_argument
   58                    | . print_argument
   59 print_argument: . "constante de cadena"
   60               | . expr
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    "constante de cadena"            shift, and go to state 104
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name          go to state 90
    print_argument_list  go to state 105
    print_argument       go to state 106
    lvalue               go to state 91
    expr                 go to state 107
    bool_term            go to state 94
    relational_expr      go to state 95
    bit_shift_expr       go to state 96
    arith_expr           go to state 97
    arith_term           go to state 98
    factor               go to state 99
    constant             go to state 100
    bool_constant        go to state 40


state 66

   47 statement: block .

    $default  reduce using rule 47 (statement)


state 67

   27 block: '{' opt_var_decl_list opt_statement_list . '}'

    '}'  shift, and go to state 108


state 68

   27 block: . '{' opt_var_decl_list opt_statement_list '}'
   30 opt_statement_list: statement_list .  ['}']
   37 statement_list: statement_list . statement
   39 statement: . assign ';'
   40          | . method_call ';'
   41          | . if_statement
   42          | . while_statement
   43          | . for_statement
   44          | . return_statement ';'
   45          | . break_statement ';'
   46          | . continue_statement ';'
   47          | . block
   48 assign: . lvalue '=' expr
   49 method_call: . method_name '(' opt_method_call_argument_list ')'
   50            | . "'print'" print_argument_list
   51            | . "'read'" read_argument_list
   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   66 if_statement: . "'if'" '(' expr ')' block opt_else
   69 while_statement: . "'while'" '(' expr ')' block
   70 for_statement: . "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block
   73 return_statement: . "'return'" opt_expr
   74 break_statement: . "'break'"
   75 continue_statement: . "'continue'"

    "'identificador'"  shift, and go to state 57
    "'break'"          shift, and go to state 58
    "'continue'"       shift, and go to state 59
    "'while'"          shift, and go to state 60
    "'for'"            shift, and go to state 61
    "'if'"             shift, and go to state 62
    "'return'"         shift, and go to state 63
    "'read'"           shift, and go to state 64
    "'print'"          shift, and go to state 65
    '{'                shift, and go to state 50

    $default  reduce using rule 30 (opt_statement_list)

    block               go to state 66
    statement           go to state 109
    assign              go to state 70
    method_call         go to state 71
    method_name         go to state 72
    lvalue              go to state 73
    if_statement        go to state 74
    while_statement     go to state 75
    for_statement       go to state 76
    return_statement    go to state 77
    break_statement     go to state 78
    continue_statement  go to state 79


state 69

   38 statement_list: statement .

    $default  reduce using rule 38 (statement_list)


state 70

   39 statement: assign . ';'

    ';'  shift, and go to state 110


state 71

   40 statement: method_call . ';'

    ';'  shift, and go to state 111


state 72

   49 method_call: method_name . '(' opt_method_call_argument_list ')'

    '('  shift, and go to state 112


state 73

   48 assign: lvalue . '=' expr

    '='  shift, and go to state 113


state 74

   41 statement: if_statement .

    $default  reduce using rule 41 (statement)


state 75

   42 statement: while_statement .

    $default  reduce using rule 42 (statement)


state 76

   43 statement: for_statement .

    $default  reduce using rule 43 (statement)


state 77

   44 statement: return_statement . ';'

    ';'  shift, and go to state 114


state 78

   45 statement: break_statement . ';'

    ';'  shift, and go to state 115


state 79

   46 statement: continue_statement . ';'

    ';'  shift, and go to state 116


state 80

   32 var_decl_list: var_decl_list var_decl .

    $default  reduce using rule 32 (var_decl_list)


state 81

   13 var_list: var_list . ',' var
   34 var_decl: type var_list . ';'

    ';'  shift, and go to state 117
    ','  shift, and go to state 31


state 82

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   64 opt_array_dimension: '[' . expr ']'
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 118
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 83

   63 lvalue: "'identificador'" opt_array_dimension .

    $default  reduce using rule 63 (lvalue)


state 84

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   69 while_statement: "'while'" '(' . expr ')' block
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 119
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 85

   48 assign: . lvalue '=' expr
   63 lvalue: . "'identificador'" opt_array_dimension
   70 for_statement: "'for'" '(' . for_assignment_list ';' expr ';' for_assignment_list ')' block
   71 for_assignment_list: . for_assignment_list ',' assign
   72                    | . assign

    "'identificador'"  shift, and go to state 101

    assign               go to state 120
    lvalue               go to state 73
    for_assignment_list  go to state 121


state 86

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   66 if_statement: "'if'" '(' . expr ')' block opt_else
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 122
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 87

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   91       | "operador aritmetico '+' o '-'" . factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name    go to state 90
    lvalue         go to state 91
    factor         go to state 123
    constant       go to state 100
    bool_constant  go to state 40


state 88

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   95       | '(' . expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 124
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 89

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   90 factor: . '!' factor
   90       | '!' . factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name    go to state 90
    lvalue         go to state 91
    factor         go to state 125
    constant       go to state 100
    bool_constant  go to state 40


state 90

   93 factor: method_name . '(' opt_method_call_argument_list ')'

    '('  shift, and go to state 126


state 91

   92 factor: lvalue .

    $default  reduce using rule 92 (factor)


state 92

   73 return_statement: "'return'" opt_expr .

    $default  reduce using rule 73 (return_statement)


state 93

   76 opt_expr: expr .  [';']
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127

    $default  reduce using rule 76 (opt_expr)


state 94

   79 expr: bool_term .  ["operador booleano 'or'", ';', ',', ']', ')']
   80 bool_term: bool_term . "operador booleano 'and'" relational_expr

    "operador booleano 'and'"  shift, and go to state 128

    $default  reduce using rule 79 (expr)


state 95

   81 bool_term: relational_expr .  ["operador booleano 'or'", "operador booleano 'and'", ';', ',', ']', ')']
   82 relational_expr: relational_expr . "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr

    "operador relacional '>', '<', '>=', '<=', '==' o '!='"  shift, and go to state 129

    $default  reduce using rule 81 (bool_term)


state 96

   83 relational_expr: bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "operador de corrimiento de bits" arith_expr

    "operador de corrimiento de bits"  shift, and go to state 130

    $default  reduce using rule 83 (relational_expr)


state 97

   85 bit_shift_expr: arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   86 arith_expr: arith_expr . "operador aritmetico '+' o '-'" arith_term

    "operador aritmetico '+' o '-'"  shift, and go to state 131

    $default  reduce using rule 85 (bit_shift_expr)


state 98

   87 arith_expr: arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", "operador aritmetico '+' o '-'", ';', ',', ']', ')']
   88 arith_term: arith_term . "operador aritmetico '*', '/', '%' " factor

    "operador aritmetico '*', '/', '%' "  shift, and go to state 132

    $default  reduce using rule 87 (arith_expr)


state 99

   89 arith_term: factor .

    $default  reduce using rule 89 (arith_term)


state 100

   94 factor: constant .

    $default  reduce using rule 94 (factor)


state 101

   63 lvalue: "'identificador'" . opt_array_dimension
   64 opt_array_dimension: . '[' expr ']'
   65                    | .  [';', ',', '=']

    '['  shift, and go to state 82

    $default  reduce using rule 65 (opt_array_dimension)

    opt_array_dimension  go to state 83


state 102

   51 method_call: "'read'" read_argument_list .  [';']
   61 read_argument_list: read_argument_list . ',' lvalue

    ','  shift, and go to state 133

    $default  reduce using rule 51 (method_call)


state 103

   62 read_argument_list: lvalue .

    $default  reduce using rule 62 (read_argument_list)


state 104

   59 print_argument: "constante de cadena" .

    $default  reduce using rule 59 (print_argument)


state 105

   50 method_call: "'print'" print_argument_list .  [';']
   57 print_argument_list: print_argument_list . ',' print_argument

    ','  shift, and go to state 134

    $default  reduce using rule 50 (method_call)


state 106

   58 print_argument_list: print_argument .

    $default  reduce using rule 58 (print_argument_list)


state 107

   60 print_argument: expr .  [';', ',']
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127

    $default  reduce using rule 60 (print_argument)


state 108

   27 block: '{' opt_var_decl_list opt_statement_list '}' .

    $default  reduce using rule 27 (block)


state 109

   37 statement_list: statement_list statement .

    $default  reduce using rule 37 (statement_list)


state 110

   39 statement: assign ';' .

    $default  reduce using rule 39 (statement)


state 111

   40 statement: method_call ';' .

    $default  reduce using rule 40 (statement)


state 112

   49 method_call: method_name '(' . opt_method_call_argument_list ')'
   52 method_name: . "'identificador'"
   53 opt_method_call_argument_list: . method_call_argument_list
   54                              | .  [')']
   55 method_call_argument_list: . method_call_argument_list ',' expr
   56                          | . expr
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    $default  reduce using rule 54 (opt_method_call_argument_list)

    method_name                    go to state 90
    opt_method_call_argument_list  go to state 135
    method_call_argument_list      go to state 136
    lvalue                         go to state 91
    expr                           go to state 137
    bool_term                      go to state 94
    relational_expr                go to state 95
    bit_shift_expr                 go to state 96
    arith_expr                     go to state 97
    arith_term                     go to state 98
    factor                         go to state 99
    constant                       go to state 100
    bool_constant                  go to state 40


state 113

   48 assign: lvalue '=' . expr
   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 138
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 114

   44 statement: return_statement ';' .

    $default  reduce using rule 44 (statement)


state 115

   45 statement: break_statement ';' .

    $default  reduce using rule 45 (statement)


state 116

   46 statement: continue_statement ';' .

    $default  reduce using rule 46 (statement)


state 117

   34 var_decl: type var_list ';' .

    $default  reduce using rule 34 (var_decl)


state 118

   64 opt_array_dimension: '[' expr . ']'
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127
    ']'                       shift, and go to state 139


state 119

   69 while_statement: "'while'" '(' expr . ')' block
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127
    ')'                       shift, and go to state 140


state 120

   72 for_assignment_list: assign .

    $default  reduce using rule 72 (for_assignment_list)


state 121

   70 for_statement: "'for'" '(' for_assignment_list . ';' expr ';' for_assignment_list ')' block
   71 for_assignment_list: for_assignment_list . ',' assign

    ';'  shift, and go to state 141
    ','  shift, and go to state 142


state 122

   66 if_statement: "'if'" '(' expr . ')' block opt_else
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127
    ')'                       shift, and go to state 143


state 123

   91 factor: "operador aritmetico '+' o '-'" factor .

    $default  reduce using rule 91 (factor)


state 124

   78 expr: expr . "operador booleano 'or'" bool_term
   95 factor: '(' expr . ')'

    "operador booleano 'or'"  shift, and go to state 127
    ')'                       shift, and go to state 144


state 125

   90 factor: '!' factor .

    $default  reduce using rule 90 (factor)


state 126

   52 method_name: . "'identificador'"
   53 opt_method_call_argument_list: . method_call_argument_list
   54                              | .  [')']
   55 method_call_argument_list: . method_call_argument_list ',' expr
   56                          | . expr
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   93       | method_name '(' . opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    $default  reduce using rule 54 (opt_method_call_argument_list)

    method_name                    go to state 90
    opt_method_call_argument_list  go to state 145
    method_call_argument_list      go to state 136
    lvalue                         go to state 91
    expr                           go to state 137
    bool_term                      go to state 94
    relational_expr                go to state 95
    bit_shift_expr                 go to state 96
    arith_expr                     go to state 97
    arith_term                     go to state 98
    factor                         go to state 99
    constant                       go to state 100
    bool_constant                  go to state 40


state 127

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: expr "operador booleano 'or'" . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    bool_term        go to state 146
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 128

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   80 bool_term: bool_term "operador booleano 'and'" . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    relational_expr  go to state 147
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 129

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   82 relational_expr: relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name     go to state 90
    lvalue          go to state 91
    bit_shift_expr  go to state 148
    arith_expr      go to state 97
    arith_term      go to state 98
    factor          go to state 99
    constant        go to state 100
    bool_constant   go to state 40


state 130

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   84 bit_shift_expr: bit_shift_expr "operador de corrimiento de bits" . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name    go to state 90
    lvalue         go to state 91
    arith_expr     go to state 149
    arith_term     go to state 98
    factor         go to state 99
    constant       go to state 100
    bool_constant  go to state 40


state 131

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   86 arith_expr: arith_expr "operador aritmetico '+' o '-'" . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name    go to state 90
    lvalue         go to state 91
    arith_term     go to state 150
    factor         go to state 99
    constant       go to state 100
    bool_constant  go to state 40


state 132

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   88 arith_term: arith_term "operador aritmetico '*', '/', '%' " . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name    go to state 90
    lvalue         go to state 91
    factor         go to state 151
    constant       go to state 100
    bool_constant  go to state 40


state 133

   61 read_argument_list: read_argument_list ',' . lvalue
   63 lvalue: . "'identificador'" opt_array_dimension

    "'identificador'"  shift, and go to state 101

    lvalue  go to state 152


state 134

   52 method_name: . "'identificador'"
   57 print_argument_list: print_argument_list ',' . print_argument
   59 print_argument: . "constante de cadena"
   60               | . expr
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    "constante de cadena"            shift, and go to state 104
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    print_argument   go to state 153
    lvalue           go to state 91
    expr             go to state 107
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 135

   49 method_call: method_name '(' opt_method_call_argument_list . ')'

    ')'  shift, and go to state 154


state 136

   53 opt_method_call_argument_list: method_call_argument_list .  [')']
   55 method_call_argument_list: method_call_argument_list . ',' expr

    ','  shift, and go to state 155

    $default  reduce using rule 53 (opt_method_call_argument_list)


state 137

   56 method_call_argument_list: expr .  [',', ')']
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127

    $default  reduce using rule 56 (method_call_argument_list)


state 138

   48 assign: lvalue '=' expr .  [';', ',', ')']
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127

    $default  reduce using rule 48 (assign)


state 139

   64 opt_array_dimension: '[' expr ']' .

    $default  reduce using rule 64 (opt_array_dimension)


state 140

   27 block: . '{' opt_var_decl_list opt_statement_list '}'
   69 while_statement: "'while'" '(' expr ')' . block

    '{'  shift, and go to state 50

    block  go to state 156


state 141

   52 method_name: . "'identificador'"
   63 lvalue: . "'identificador'" opt_array_dimension
   70 for_statement: "'for'" '(' for_assignment_list ';' . expr ';' for_assignment_list ')' block
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 157
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 142

   48 assign: . lvalue '=' expr
   63 lvalue: . "'identificador'" opt_array_dimension
   71 for_assignment_list: for_assignment_list ',' . assign

    "'identificador'"  shift, and go to state 101

    assign  go to state 158
    lvalue  go to state 73


state 143

   27 block: . '{' opt_var_decl_list opt_statement_list '}'
   66 if_statement: "'if'" '(' expr ')' . block opt_else

    '{'  shift, and go to state 50

    block  go to state 159


state 144

   95 factor: '(' expr ')' .

    $default  reduce using rule 95 (factor)


state 145

   93 factor: method_name '(' opt_method_call_argument_list . ')'

    ')'  shift, and go to state 160


state 146

   78 expr: expr "operador booleano 'or'" bool_term .  ["operador booleano 'or'", ';', ',', ']', ')']
   80 bool_term: bool_term . "operador booleano 'and'" relational_expr

    "operador booleano 'and'"  shift, and go to state 128

    $default  reduce using rule 78 (expr)


state 147

   80 bool_term: bool_term "operador booleano 'and'" relational_expr .  ["operador booleano 'or'", "operador booleano 'and'", ';', ',', ']', ')']
   82 relational_expr: relational_expr . "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr

    "operador relacional '>', '<', '>=', '<=', '==' o '!='"  shift, and go to state 129

    $default  reduce using rule 80 (bool_term)


state 148

   82 relational_expr: relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "operador de corrimiento de bits" arith_expr

    "operador de corrimiento de bits"  shift, and go to state 130

    $default  reduce using rule 82 (relational_expr)


state 149

   84 bit_shift_expr: bit_shift_expr "operador de corrimiento de bits" arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   86 arith_expr: arith_expr . "operador aritmetico '+' o '-'" arith_term

    "operador aritmetico '+' o '-'"  shift, and go to state 131

    $default  reduce using rule 84 (bit_shift_expr)


state 150

   86 arith_expr: arith_expr "operador aritmetico '+' o '-'" arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", "operador aritmetico '+' o '-'", ';', ',', ']', ')']
   88 arith_term: arith_term . "operador aritmetico '*', '/', '%' " factor

    "operador aritmetico '*', '/', '%' "  shift, and go to state 132

    $default  reduce using rule 86 (arith_expr)


state 151

   88 arith_term: arith_term "operador aritmetico '*', '/', '%' " factor .

    $default  reduce using rule 88 (arith_term)


state 152

   61 read_argument_list: read_argument_list ',' lvalue .

    $default  reduce using rule 61 (read_argument_list)


state 153

   57 print_argument_list: print_argument_list ',' print_argument .

    $default  reduce using rule 57 (print_argument_list)


state 154

   49 method_call: method_name '(' opt_method_call_argument_list ')' .

    $default  reduce using rule 49 (method_call)


state 155

   52 method_name: . "'identificador'"
   55 method_call_argument_list: method_call_argument_list ',' . expr
   63 lvalue: . "'identificador'" opt_array_dimension
   78 expr: . expr "operador booleano 'or'" bool_term
   79     | . bool_term
   80 bool_term: . bool_term "operador booleano 'and'" relational_expr
   81          | . relational_expr
   82 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   85               | . arith_expr
   86 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   87           | . arith_term
   88 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   89           | . factor
   90 factor: . '!' factor
   91       | . "operador aritmetico '+' o '-'" factor
   92       | . lvalue
   93       | . method_name '(' opt_method_call_argument_list ')'
   94       | . constant
   95       | . '(' expr ')'
   96 constant: . "constante entera"
   97         | . "constante caracter"
   98         | . "constante real"
   99         | . bool_constant
  100 bool_constant: . "'true'"
  101              | . "'false'"

    "'identificador'"                shift, and go to state 57
    "'true'"                         shift, and go to state 34
    "'false'"                        shift, and go to state 35
    "operador aritmetico '+' o '-'"  shift, and go to state 87
    "constante caracter"             shift, and go to state 36
    "constante entera"               shift, and go to state 37
    "constante real"                 shift, and go to state 38
    '('                              shift, and go to state 88
    '!'                              shift, and go to state 89

    method_name      go to state 90
    lvalue           go to state 91
    expr             go to state 161
    bool_term        go to state 94
    relational_expr  go to state 95
    bit_shift_expr   go to state 96
    arith_expr       go to state 97
    arith_term       go to state 98
    factor           go to state 99
    constant         go to state 100
    bool_constant    go to state 40


state 156

   69 while_statement: "'while'" '(' expr ')' block .

    $default  reduce using rule 69 (while_statement)


state 157

   70 for_statement: "'for'" '(' for_assignment_list ';' expr . ';' for_assignment_list ')' block
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127
    ';'                       shift, and go to state 162


state 158

   71 for_assignment_list: for_assignment_list ',' assign .

    $default  reduce using rule 71 (for_assignment_list)


state 159

   66 if_statement: "'if'" '(' expr ')' block . opt_else
   67 opt_else: . "'else'" block
   68         | .  ["'identificador'", "'break'", "'continue'", "'while'", "'for'", "'if'", "'return'", "'read'", "'print'", '{', '}']

    "'else'"  shift, and go to state 163

    $default  reduce using rule 68 (opt_else)

    opt_else  go to state 164


state 160

   93 factor: method_name '(' opt_method_call_argument_list ')' .

    $default  reduce using rule 93 (factor)


state 161

   55 method_call_argument_list: method_call_argument_list ',' expr .  [',', ')']
   78 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 127

    $default  reduce using rule 55 (method_call_argument_list)


state 162

   48 assign: . lvalue '=' expr
   63 lvalue: . "'identificador'" opt_array_dimension
   70 for_statement: "'for'" '(' for_assignment_list ';' expr ';' . for_assignment_list ')' block
   71 for_assignment_list: . for_assignment_list ',' assign
   72                    | . assign

    "'identificador'"  shift, and go to state 101

    assign               go to state 120
    lvalue               go to state 73
    for_assignment_list  go to state 165


state 163

   27 block: . '{' opt_var_decl_list opt_statement_list '}'
   67 opt_else: "'else'" . block

    '{'  shift, and go to state 50

    block  go to state 166


state 164

   66 if_statement: "'if'" '(' expr ')' block opt_else .

    $default  reduce using rule 66 (if_statement)


state 165

   70 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list . ')' block
   71 for_assignment_list: for_assignment_list . ',' assign

    ','  shift, and go to state 142
    ')'  shift, and go to state 167


state 166

   67 opt_else: "'else'" block .

    $default  reduce using rule 67 (opt_else)


state 167

   27 block: . '{' opt_var_decl_list opt_statement_list '}'
   70 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' . block

    '{'  shift, and go to state 50

    block  go to state 168


state 168

   70 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block .

    $default  reduce using rule 70 (for_statement)
